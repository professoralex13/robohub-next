// generator
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations}
}

// Account represents a connection between a user and an OAuth provider
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Stores data about each logged in session for a user
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Stores data about a user. Users are differentiated by email, so OAuth connections are linked by the affiliated email
model User {
    id            String    @id @default(cuid())
    // The Users username
    name          String
    email         String    @unique
    // Date and Time when the email adress was verified, if it was verified
    emailVerified DateTime?
    // Url of the users profile picture
    image         String

    notebookEntries     NoteBookEntry[]
    blogs               Blog[]
    organisations       OrganisationUser[]
    teams               TeamUser[]
    organisationInvites OrganisationInvite[] @relation("invitee")
    sentInvitations     OrganisationInvite[] @relation("inviter")
    Account             Account[]
    Session             Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Represents someones membership within an organisation
model OrganisationUser {
    userId         String
    organisationId Int

    user         User         @relation(fields: [userId], references: [id])
    organisation Organisation @relation(fields: [organisationId], references: [id])

    isAdmin Boolean

    @@id([userId, organisationId])
}

// Represents a pending invitation between an inviter in an organisation, and a user who is being invited
model OrganisationInvite {
    userId         String
    organisationId Int
    inviterId      String

    user         User         @relation("invitee", fields: [userId], references: [id])
    organisation Organisation @relation(fields: [organisationId], references: [id])
    inviter      User         @relation("inviter", fields: [inviterId], references: [id])

    isAdmin Boolean

    @@id([userId, organisationId])
}

model Organisation {
    id          Int                  @id @default(autoincrement())
    name        String               @unique
    // Url name represents the sanitized name that will be used for routing
    urlName     String               @unique
    description String
    location    String
    teams       Team[]
    categories  Category[]
    partStocks  PartStock[]
    customParts Part[]
    blogs       Blog[]
    users       OrganisationUser[]
    userInvites OrganisationInvite[]
}

// Represents someones membership within a team
model TeamUser {
    userId String
    teamId String

    user User @relation(fields: [userId], references: [id])
    team Team @relation(fields: [teamId], references: [id])

    isLeader Boolean

    @@id([userId, teamId])
}

model Team {
    id             String       @id
    name           String
    organisation   Organisation @relation(fields: [organisationId], references: [id])
    organisationId Int
    notebooks      NoteBook[]
    users          TeamUser[]

    @@unique([name, organisationId])
}

model Part {
    id             Int           @id @default(autoincrement())
    name           String
    category       Category?     @relation(fields: [categoryId], references: [id])
    organisation   Organisation? @relation(fields: [organisationId], references: [id])
    categoryId     Int?
    organisationId Int?
    stocks         PartStock[]

    @@unique([name, organisationId])
}

model PartStock {
    organisation Organisation @relation(fields: [organisationId], references: [id])
    part         Part         @relation(fields: [partId], references: [id])
    count        Int          @default(0)

    organisationId Int
    partId         Int

    @@id([organisationId, partId])
}

model Category {
    id   Int    @id @default(autoincrement())
    name String

    parentCategory  Category?     @relation("CategoryParents", fields: [parentCategoryId], references: [id])
    childCategories Category[]    @relation("CategoryParents")
    organisation    Organisation? @relation(fields: [organisationId], references: [id])

    parts Part[]

    organisationId   Int?
    parentCategoryId Int?

    @@unique([name, organisationId])
}

model NoteBook {
    id          Int     @id @default(autoincrement())
    title       String
    description String?

    team            Team            @relation(fields: [teamId], references: [id])
    teamId          String
    notebookEntries NoteBookEntry[]

    @@unique([title, teamId])
}

model NoteBookEntry {
    id           Int      @id @default(autoincrement())
    content      String
    creationDate DateTime @default(now())
    updatedAt    DateTime @updatedAt

    notebook   NoteBook @relation(fields: [notebookId], references: [id])
    notebookId Int
    authors    User[]
}

model Blog {
    id          Int     @id @default(autoincrement())
    title       String
    description String?
    content     String
    authors     User[]

    creationDate DateTime @default(now())

    organisation   Organisation @relation(fields: [organisationId], references: [id])
    organisationId Int
}
